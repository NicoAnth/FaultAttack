diff --git a/Main.cpp b/Main.cpp
index 4fd8e18..2f89ae4 100644
--- a/Main.cpp
+++ b/Main.cpp
@@ -10,37 +10,55 @@ void faultAttackf(){
     "144FCD14635AECC9","004FEC34635AEC89","104FEC14435AECC9","004FAD14637AFD89","104FAC14635ADD89","044FAC14635AB9A9","804FED14625ABD89","14CFED04625AF989","144F6D14635AB989","144AED84635AB989",
     "144EED04E25AFD8D","144BED1463DAFD8D","144FED14635A7D9D","144AED54635BFD0D"};
 
-    for(int j=0;j<1;j++){
-        
+    //Generate the 8 Difference Distribution Table
+    std::vector<std::vector<std::vector<int>>> diffDistributionTable = siDDT();
+
+    //2D Vector of Difference Distribution Table output, ddtoValue[FaultCipherNumber][S-box]
+    std::vector<std::vector<int>> ddtoValue(31);
+
+    //2D Vector of possibles keys, possibleKeys[S-Box][key Number]
+    std::vector<std::vector<std::string>> possibleKeys(8);
+
     //Hexa into string bin
     std::string binC = hexStrToBinStr(correctCypher);
-    std::string binF = hexStrToBinStr(FaultCyphers[j]);
 
     //IPFunction
     std::string ipBin = ipDES(binC);
-    std::string ipBinF = ipDES(binF);
-    /* std::cout << ipBin << std::endl; */
 
     //SplitIntoLandR
     std::string L16;
     std::string R16;
     splitIntoLandR(R16,L16,ipBin);
+
+    //Expansion     
+    std::string ER15 = expansion(L16);
+
+    //Iterate over every fault ciphers
+    for(int i=0;i<1;i++){
+
+    //Hexa into string bin
+    std::string binF = hexStrToBinStr(FaultCyphers[i]);
+
+    //IPFunction
+    std::string ipBinF = ipDES(binF);
+    /* std::cout << ipBin << std::endl; */
+
+    //SplitIntoLandR
     std::string L16F;
     std::string R16F;
     splitIntoLandR(R16F,L16F,ipBinF);
     
-
-    //Expansion     
-    std::string ER15 = expansion(L16);
+    //Expansion
     std::string ER15F = expansion(L16F);
-    std::cout << "ER15 :" << ER15 << std::endl;
+    /* std::cout << "ER15 :" << ER15 << std::endl;
     std::cout << "ER15F :" << ER15F << std::endl;
+ */
     //Get the difference between the input of the S-boxes from the normal execution and the output of the S-boxes from the faulty execution
     std::string diffIn = XOR(ER15,ER15F,48);
     std::vector<std::string> sBoxInput = siBoxIn(diffIn);
     //std::cout << "diff In Value :" << diffIn << std::endl;
     /*std::cout << "diff In Value hexa:" << convertBinToHex(diffIn) << std::endl;*/
-    std::cout << "S-box 1 input :" << sBoxInput[0] << std::endl;
+    /* std::cout << "S-box 1 input :" << sBoxInput[0] << std::endl; */
 
 
     //Get the difference between the output of the S-boxes from the normal execution and the output of the S-boxes from the faulty execution
@@ -49,25 +67,26 @@ void faultAttackf(){
     /* std::cout << "diff Out Value :" << diffOut << std::endl;
     std::cout << "S-box 8 output :" << sBoxOutput[0] << std::endl; */
 
-    //Generate the 8 Difference Distribution Table
-    std::vector<std::vector<std::vector<int>>> diffDistributionTable = siDDT();
-
     //Get Difference Distribution Table value for our ciphers
-    std::vector<int> value;
-    std::cout << "Difference Distribution Table Value :" ;
-    for(int i=0;i<8;i++){
-        value.push_back(diffDistributionTable[i][convertBinaryToDecimal(sBoxInput[i])][convertBinaryToDecimal(sBoxOutput[i])]);
-        std::cout << value[i] << ", ";
+    for(int j=0;j<8;j++){
+        ddtoValue[i].push_back(diffDistributionTable[j][convertBinaryToDecimal(sBoxInput[j])][convertBinaryToDecimal(sBoxOutput[j])]);
     }
-    for(int i=0;i<64;i++){
-        //std::cout << generatePairs(sBoxInput[0])[i].first << " ,"<< generatePairs(sBoxInput[0])[i].second << std::endl;
-        std::string entreePossible = XOR(sBox(generatePairs(sBoxInput[0])[i].first,0),sBox(generatePairs(sBoxInput[0])[i].second,0),4);
-        if(entreePossible == sBoxOutput[0]){
-        std::cout << XOR(generatePairs(sBoxInput[0])[i].first,ER15,6) << std::endl;
+    //Iterate over the 8 S-Boxes
+    for (int j=0;j<8;j++){
+        if( (ddtoValue[i][j] != 0) && (ddtoValue[i][j] != 64)){
+            for(int k=0;k<64;k++){
+                //XOR S_i(S_i,I) and S_i(S_i,I)* and stock the value if it's equal to S_i,OâŠ•
+                std::string entreePossible = XOR(sBox(generatePairs(sBoxInput[0])[k].first,j),sBox(generatePairs(sBoxInput[0])[k].second,j),4);
+                    if(entreePossible == sBoxOutput[k]){
+                        possibleKeys[j].push_back(XOR(generatePairs(sBoxInput[0])[k].first,ER15,6));
+                    }
+            }
         }
     }
     }
-
+    /* for(int i=0;i<1;i++){
+        std::cout<<possibleKeys[0][i];
+    } */
 }
 
 
